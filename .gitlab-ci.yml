# Define the stages of the CI pipeline
stages:
  - build
  - test_springboot
  - test_python

# Set environment variables or configuration options
variables:
  # Disable Gradle Daemon to avoid potential issues with CI environment
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  JACOCO_CSV_LOCATION: "spring/build/reports/jacoco/test/jacocoTestReport.csv"

# Define the build stage
build:
  stage: build
  image: eclipse-temurin
  # Script to execute for the build stage
  script:
    - cd spring
    # Execute Gradle build excluding tests
    - ./gradlew build -x test
  # Define artifacts to be preserved from this stage
  artifacts:
    paths:
      # Specify the path to the generated JAR file
      - spring/build/libs/*.jar

# Define the test stage for Spring Boot application
test_springboot:
  stage: test_springboot
  image: eclipse-temurin
  # Script to execute for the test stage
  script:
    - cd spring
    # Run Gradle tests
    - ./gradlew test
  # Ensure that the pipeline fails if any errors occur during testing
  rules:
    - when: always
      allow_failure: false

# Define the test stage for Python
test_python:
  stage: test_python
  image: python:3.9
  # Script to execute for the test stage
  script:
    - cd web-scraper
    # Install dependencies
    - pip install -r requirements.txt
    # Run pytest
    - pytest
    # Run pytest with coverage
    - coverage run -m pytest
    # Display coverage test results
    - coverage report
    # run pylint
    - pylint ./indeed_scrape.py
  # Ensure that the pipeline fails if any errors occur during testing
  rules:
    - when: always
      allow_failure: false
